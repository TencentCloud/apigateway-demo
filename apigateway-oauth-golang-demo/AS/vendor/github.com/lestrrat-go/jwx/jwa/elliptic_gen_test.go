// this file was auto-generated by internal/cmd/gentypes/main.go: DO NOT EDIT

package jwa_test

import (
	"testing"

	"github.com/lestrrat-go/jwx/jwa"
	"github.com/stretchr/testify/assert"
)

func TestEllipticCurveAlgorithm(t *testing.T) {
	t.Run(`accept jwa constant P256`, func(t *testing.T) {
		t.Parallel()
		var dst jwa.EllipticCurveAlgorithm
		if !assert.NoError(t, dst.Accept(jwa.P256), `accept is successful`) {
			return
		}
		if !assert.Equal(t, jwa.P256, dst, `accepted value should be equal to constant`) {
			return
		}
	})
	t.Run(`accept the string P-256`, func(t *testing.T) {
		t.Parallel()
		var dst jwa.EllipticCurveAlgorithm
		if !assert.NoError(t, dst.Accept("P-256"), `accept is successful`) {
			return
		}
		if !assert.Equal(t, jwa.P256, dst, `accepted value should be equal to constant`) {
			return
		}
	})
	t.Run(`accept fmt.Stringer for P-256`, func(t *testing.T) {
		t.Parallel()
		var dst jwa.EllipticCurveAlgorithm
		if !assert.NoError(t, dst.Accept(stringer{src: "P-256"}), `accept is successful`) {
			return
		}
		if !assert.Equal(t, jwa.P256, dst, `accepted value should be equal to constant`) {
			return
		}
	})
	t.Run(`stringification for P-256`, func(t *testing.T) {
		t.Parallel()
		if !assert.Equal(t, "P-256", jwa.P256.String(), `stringified value matches`) {
			return
		}
	})
	t.Run(`accept jwa constant P384`, func(t *testing.T) {
		t.Parallel()
		var dst jwa.EllipticCurveAlgorithm
		if !assert.NoError(t, dst.Accept(jwa.P384), `accept is successful`) {
			return
		}
		if !assert.Equal(t, jwa.P384, dst, `accepted value should be equal to constant`) {
			return
		}
	})
	t.Run(`accept the string P-384`, func(t *testing.T) {
		t.Parallel()
		var dst jwa.EllipticCurveAlgorithm
		if !assert.NoError(t, dst.Accept("P-384"), `accept is successful`) {
			return
		}
		if !assert.Equal(t, jwa.P384, dst, `accepted value should be equal to constant`) {
			return
		}
	})
	t.Run(`accept fmt.Stringer for P-384`, func(t *testing.T) {
		t.Parallel()
		var dst jwa.EllipticCurveAlgorithm
		if !assert.NoError(t, dst.Accept(stringer{src: "P-384"}), `accept is successful`) {
			return
		}
		if !assert.Equal(t, jwa.P384, dst, `accepted value should be equal to constant`) {
			return
		}
	})
	t.Run(`stringification for P-384`, func(t *testing.T) {
		t.Parallel()
		if !assert.Equal(t, "P-384", jwa.P384.String(), `stringified value matches`) {
			return
		}
	})
	t.Run(`accept jwa constant P521`, func(t *testing.T) {
		t.Parallel()
		var dst jwa.EllipticCurveAlgorithm
		if !assert.NoError(t, dst.Accept(jwa.P521), `accept is successful`) {
			return
		}
		if !assert.Equal(t, jwa.P521, dst, `accepted value should be equal to constant`) {
			return
		}
	})
	t.Run(`accept the string P-521`, func(t *testing.T) {
		t.Parallel()
		var dst jwa.EllipticCurveAlgorithm
		if !assert.NoError(t, dst.Accept("P-521"), `accept is successful`) {
			return
		}
		if !assert.Equal(t, jwa.P521, dst, `accepted value should be equal to constant`) {
			return
		}
	})
	t.Run(`accept fmt.Stringer for P-521`, func(t *testing.T) {
		t.Parallel()
		var dst jwa.EllipticCurveAlgorithm
		if !assert.NoError(t, dst.Accept(stringer{src: "P-521"}), `accept is successful`) {
			return
		}
		if !assert.Equal(t, jwa.P521, dst, `accepted value should be equal to constant`) {
			return
		}
	})
	t.Run(`stringification for P-521`, func(t *testing.T) {
		t.Parallel()
		if !assert.Equal(t, "P-521", jwa.P521.String(), `stringified value matches`) {
			return
		}
	})
	t.Run(`do not accept invalid constant InvalidEllipticCurve`, func(t *testing.T) {
		t.Parallel()
		var dst jwa.EllipticCurveAlgorithm
		if !assert.Error(t, dst.Accept(jwa.InvalidEllipticCurve), `accept should fail`) {
			return
		}
	})
	t.Run(`bail out on random integer value`, func(t *testing.T) {
		t.Parallel()
		var dst jwa.EllipticCurveAlgorithm
		if !assert.Error(t, dst.Accept(1), `accept should fail`) {
			return
		}
	})
	t.Run(`do not accept invalid (totally made up) string value`, func(t *testing.T) {
		t.Parallel()
		var dst jwa.EllipticCurveAlgorithm
		if !assert.Error(t, dst.Accept(`totallyInvfalidValue`), `accept should fail`) {
			return
		}
	})
}
